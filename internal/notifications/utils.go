package notifications

import (
	"encoding/json"
	"fmt"

	"github.com/sergeychur/give_it_away/internal/models"
)

const (
	AD_CLOSE             = "ad_close"
	AD_RESPOND           = "respond"
	DEAL_FULFILL         = "fulfill"
	STATUS_CHANGED       = "status"
	AD_DELETED           = "deleted"
	AUTHOR_CANCELLED     = "authorCancel"
	SUBSCRIBER_CANCELLED = "subscriberCancel"
	COMMENT_CREATED      = "new_comment"
	MAX_BID_UPDATED      = "max_bid_upd"
)

var (
	FuncsMap = map[string]func() interface{}{
		AD_CLOSE: func() interface{} {
			return &models.AuthorClosedAd{}
		},
		AD_RESPOND: func() interface{} {
			return &models.UserSubscribed{}
		},
		DEAL_FULFILL: func() interface{} {
			return &models.AdStatusChanged{}
		},
		STATUS_CHANGED: func() interface{} {
			return &models.AdStatusChanged{}
		},
		AD_DELETED: func() interface{} {
			return &models.AdStatusChanged{}
		},
		AUTHOR_CANCELLED: func() interface{} {
			return &models.AuthorCancelled{}
		},
		SUBSCRIBER_CANCELLED: func() interface{} {
			return &models.SubscriberCancelled{}
		},
		COMMENT_CREATED: func() interface{} {
			return &models.NewComment{}
		},
		MAX_BID_UPDATED: func() interface{} {
			return &models.MaxBidUpdated{}
		},
	}
)

func FormPayLoad(payload []byte, notificationType string) (interface{}, error) {
	neededFunc, ok := FuncsMap[notificationType]
	if !ok {
		return nil, fmt.Errorf("unable to detect notification type")
	}
	val := neededFunc()
	err := json.Unmarshal(payload, &val)
	return val, err
}

const ERR_FORM = "CANT_CONVERT"
const ERR_UNKNOWN_TYPE = "Unknown type"

func AdToText(m models.AdForNotification) string {
	var header = m.Header
	if header != "" {
		header = "'" + header + "'"
	}
	return fmt.Sprintf("%s (https://vk.com/app7360033_45863670#%d)", header, m.AdId)

}

func AuthorToText(user models.User) string {
	return fmt.Sprintf("@id%d(%s %s)", user.VkId, user.Name, user.Surname)

}

func NotificationToText(m models.Notification) (string, error) {
	var text string
	switch v := m.Payload.(type) {
	case models.NewComment:
		{
			var comment = m.Payload.(models.NewComment)

			var author = comment.Comment.Author
			text = "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º " + AdToText(comment.Ad) + "\n"
			text += AuthorToText(author) + " : '" + comment.Comment.Text + "'"
			break
		}
	case *models.UserSubscribed:
		{
			var user = m.Payload.(*models.UserSubscribed)
			var author = user.Author
			text = "–ö–æ–µ-–∫—Ç–æ (" +
				AuthorToText(author) +
				") –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ " +
				AdToText(user.Ad) + "\n"
			break
		}
	case *models.MaxBidUpdated:
		{
			var maxBid = m.Payload.(*models.MaxBidUpdated)
			text = "–ù–æ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏" +
				AdToText(models.AdForNotification{AdId: m.AdId}) + "\n"
			text += fmt.Sprintf("%s: %düí∞", AuthorToText(maxBid.User), maxBid.NewBid)
			break
		}
	case models.AdStatusChanged:
		switch m.NotificationType {

		case STATUS_CHANGED:
			{
				var status = m.Payload.(models.AdStatusChanged)
				switch status.Ad.Status {
				case "chosen": //!! –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
					text = "–ê–≤—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ " + AdToText(status.Ad)
					break
				case "closed": //!! –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
					text = "–ü–µ—Ä–µ–¥–∞—á–∞ –≤–µ—â–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ " + AdToText(status.Ad) + " –ø—Ä–æ–≤–µ–¥–µ–Ω–∞"
					break
				}
				break
			}

		case AD_DELETED:
			{
				var status = m.Payload.(models.AdStatusChanged)
				text = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ " + AdToText(status.Ad) + " —É–¥–∞–ª–µ–Ω–æ."
				break
			}
		case DEAL_FULFILL:
			{
				var ad = m.Payload.(models.AdStatusChanged)
				text = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è " + AdToText(ad.Ad) + " –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—â–∏."
				break
			}
		}
		break
	case *models.AuthorClosedAd:
		var ad = m.Payload.(*models.AuthorClosedAd)
		text = "–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è " + AdToText(ad.Ad) + " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∑–∞–±—Ä–∞—Ç—å –≤–µ—â—å. –°–≤—è–∂–∏—Ç–µ—Å—å" +
			" —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—â–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ " +
			"–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–±–µ—Ä—ë—Ç–µ –µ—ë."
		break
	case models.AuthorCancelled:
		var ad = m.Payload.(models.AuthorCancelled)
		text = "–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è " + AdToText(ad.Ad) + " –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –≤–µ—â–∏ –≤–∞–º."
		break
	case models.SubscriberCancelled:
		var ad = m.Payload.(models.SubscriberCancelled)

		text = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è " + AdToText(ad.Ad) + " –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—â–∏."
		break
	default:
		err := fmt.Errorf("Unknown type: %T", v)
		fmt.Printf("error is %e", err)
		return "", err
	}
	return text, nil
}
