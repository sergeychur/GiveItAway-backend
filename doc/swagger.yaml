swagger: "2.0"
info:
  description: "API for GiveItAway vk mini app"
  version: "1.0.0"
  title: "Отдай даром"
basePath: "/api"
tags:
  - name: "ad"
    description: "Объявления"
  - name: "comment"
    description: "Комментарии к объявлениям"
  - name: "donat"
    description: "Пожертвования"
  - name: "deal"
    description: "Сделка по объявлению"
  - name: "upload"
    description: "Доступ к фото объявлений"
  - name: "notification"
    description: "Вкладка обновлений, запросы на них"
schemes:
  - "https"
  - "http"
paths:
  /upload/{path_to_file}:
    get:
      tags: ["upload"]
      summary: "Получить файл"
      description: "хранится в БД, там со слешами, коды ответа как у обычного файлового сервера"
      parameters:
        - name: "path_to_file"
          in: "path"
          type: "string"
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not Found

  /ad/create:
    post:
      tags:
        - "ad"
      summary: "Добавить новое объявление"
      description: ""
      operationId: "addAd"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Добавляем пользовательское объявление"
          required: true
          schema:
            $ref: "#/definitions/Ad"
      responses:
        401:
          description: "trying to create ad without auth"
        201:
          description: "Ad created"
          schema:
            $ref: '#/definitions/AdCreationResult'
        400:
          description: "Invalid input"
        404:
          description: "user doesn't exist"
  /ad/{ad_id}/edit:
    put:
      tags:
        - "ad"
      summary: "Обновить объявление"
      description: "Можно изменять header, text, region, ditrict, is_auction, feedback_type, extra_field, geo_position, category, "
      operationId: "updateAd"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Ad object to modify"
          required: true
          schema:
            $ref: "#/definitions/Ad"
        - in: "path"
          name: "ad_id"
          required: true
          type: "integer"
      responses:
        403:
          description: "trying to edit not user's ad"
        401:
          description: "no auth"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Ad not found"
        200:
          description: "Modification succeeded"
  /ad/{ad_id}/details:
    get:
      tags:
        - "ad"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "ad_id"
          type: integer
          required: true
          description: "The id of required ad"
      summary: "Посмотреть конкретное объявление"
      responses:
        404:
          description:
            "Ad doesn't exist"
        200:
          description:
            "The details of ad"
          schema:
            $ref: "#/definitions/AdForUsersDetailed"
  /ad/{ad_id}/set_hidden:
    post:
      tags:
        - "ad"
      parameters:
        - in: "path"
          name: "ad_id"
          type: integer
          required: true
          description: "The id of required ad"
      summary: "Сделать объявление скрытым(доступно только для автора)"
      responses:
        404:
          description:
            "Ad doesn't exist"
        200:
          description:
            "Hidden status was set"
        403:
          description:
            "user is not author"
        400:
          description:
            "bad parameters"

  /ad/{ad_id}/set_visible:
    post:
      tags:
        - "ad"
      parameters:
        - in: "path"
          name: "ad_id"
          type: integer
          required: true
          description: "The id of required ad"
      summary: "Сделать объявление открытым(доступным всем)"
      responses:
        404:
          description:
            "Ad doesn't exist"
        200:
          description:
            "Hidden status was set"
        403:
          description:
            "user is not author"
        400:
          description:
            "bad parameters"
  /ad/find:
    get:
      tags:
        - "ad"
      summary: "Найти объявления"
      operationId: "findAds"
      produces:
        - "application/json"
      parameters:
        - name: "category"
          in: "query"
          type: "string"
          description: "Category where to search"
        - name: "author_id"
          in: "query"
          type: "string"
          description: "Ads of some user"
        - name: "region"
          in: "query"
          type: "string"
          description: "Region where to search"
        - name: "district"
          in: "query"
          type: "string"
          description: "District where to search"
        - name: "query"
          in: "query"
          type: "string"
          description: "Query"
        - name: "page"
          in: "query"
          type: "string"
          description: "page for pagination"
          required: true
        - name: "rows_per_page"
          in: "query"
          type: "string"
          description: "rows per page for pagination"
          required: true
        - name: "sort_by"
          in: "query"
          description: "sort by time (\"time\") or distance to current geoposition (\"geo\")"
          type: "string"
          # enum:
          #   - "time"
          #   - "geo"
          # default: "time"
        - name: lat
          description: "lattitude of user's geoposition"
          in: "query"
          type: "number"
        - name: long
          in: "query"
          type: "number"
          description: "longitude of user's geoposition"
      responses:
        200:
          description: "found smth"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AdForUsers"
        400:
          description: "Invalid parameters"
        404:
          description: "Found nothing"
  /ad/{ad_id}/upload_image:
    post:
      tags:
        - ad
      summary: Добавить фото к объявлению
      operationId: AdImage
      consumes:
        - multipart/form-data
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: OK
        403:
          description: "trying to edit not user's ad"
        401:
          description: "no auth"
        '400':
          description: Error in the path
        '500':
          description: Error while uploading the file
  /ad/{ad_id}/subscribe:
    post:
      summary: "Подписаться на объявление (быть среди тех, кто хочет забрать)"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: user_id
          schema:
            type: integer
          in: body
          description: User ID of suscriber, mb passed in some other way
      responses:
        200:
          description: "user subscribed to ad"
        404:
          description: "ad not found"
        403:
          description: "user id is the same as author's"
        401:
          description: "no auth"
  /ad/{ad_id}/subscribers:
    get:
      summary: "Посмотреть подписавшихся на объвлениe"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: "page"
          in: "query"
          type: "string"
          description: "page for pagination"
          required: true
        - name: "rows_per_page"
          in: "query"
          type: "string"
          description: "rows per page for pagination"
          required: true
      responses:
        200:
          description: "users found"
        400:
          description: "some parameters are bad"
        404:
          description: "ad or subscribers are not found"
  /ad/{ad_id}/unsubscribe:
    post:
      summary: "Отписаться от объявления"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: user_id
          schema:
            type: integer
          in: body
          description: User ID of suscriber, mb passed in some other way
      responses:
        200:
          description: "user unsubscribed from ad"
        404:
          description: "ad not found"
        403:
          description: "user wasn't subscribed"
        401:
          description: "no auth"
  /ad/{ad_id}/delete:
    post:
      summary: "Закрыть объявление без сделки(удалить его насовсем)"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: user_id
          schema:
            type: integer
          in: body
          description: User ID of suscriber, !!!! будет передаваться в куке
      responses:
        200:
          description: "ad closed"
        404:
          description: "ad not found"
        403:
          description: "no user id or it doesn't match with authors"
        400:
          description: "bad parameters"

  /ad/{ad_id}/delete_photo:
    post:
      summary: "Удалить фото, принадлежащее объявлению"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: user_id
          schema:
            type: integer
          in: body
          description: User ID of suscriber, !!!! будет передаваться в куке
        - name: ad_photo_id
          in: query
          type: array
          items:
            type: integer
          required: true
          description: Id записи о пути к фото, хранящийся в модели объявления
      responses:
        200:
          description: "photos deleted"
        404:
          description: "ad not found"
        403:
          description: "no user id or it doesn't match with authors"
        400:
          description: "bad parameters"

  /ad/{ad_id}/make_deal:
    put:
      summary: "Выбрать пользователя, с которым заключить сделку об отдаче товара"
      tags:
        - ad
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: subscriber_id
          in: query
          required: true
          type: integer
      responses:
        201:
          description: "deal created"
        404:
          description: "ad not found"
        403:
          description: "author id doesn't match with authors"
        409:
          description: "no subscriber id in subscribers list or deal already exists"
        401:
          description: "no auth"
  /ad/{ad_id}/deal:
    get:
      summary: "Получить параметры сделки, ассоциированной с этим объявлением"
      tags:
        - deal
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "there is a pending deal"
          schema:
            $ref: "#/definitions/DealDetails"
        400:
          description: "wrong parameters"
        404:
          description: "no pending deal for ad"
  /ad/{ad_id}/comments:
    get:
      tags:
        - "comment"
      summary: "Посмотреть комменты к объявлению"
      operationId: "listComments"
      produces:
        - "application/json"
      parameters:
        - name: ad_id
          in: path
          required: true
          type: integer
        - name: "page"
          in: "query"
          type: "string"
          description: "page for pagination"
          required: true
        - name: "rows_per_page"
          in: "query"
          type: "string"
          description: "rows per page for pagination"
          required: true
      responses:
        200:
          description: "comments found"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CommentForUser"
        400:
          description: "Invalid parameters"
        404:
          description: "Found nothing"
    post:
      tags: ["comment"]
      summary: "Добавить новый комментарий"
      description: ""
      operationId: "addComment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Добавляем комментарий"
          required: true
          schema:
            $ref: "#/definitions/Comment"
        - in: "path"
          name: "ad_id"
          type: integer
          required: true
      responses:
        201:
          description: "Comment created"
        400:
          description: "Invalid input"
        401:
          description: "no auth"
  /comment/{comment_id}:
    put:
      tags: ["comment"]
      summary: "Обновить текст комментария"
      parameters:
        - in: "path"
          name: "comment_id"
          required: true
          type: integer
        - in: "body"
          name: "body"
          description: "Обновляем комментарий"
          required: true
          schema:
            $ref: "#/definitions/Comment"
      responses:
        200:
          description: "comment updated"
        404:
          description: "no comment to update"
        403:
          description: "wrong user"
        401:
          description: "no auth"
  /deal/{deal_id}/cancel:
    post:
      tags: ["deal"]
      summary: "Отменить сделку."
      description: "Если id - id автора, то объявление остается открытым и сделка удаляется; если id - id подписчика, то сделка удаляется, а объявление становится aborted"
      parameters:
        - name: "deal_id"
          type: "integer"
          in: "path"
          required: true
      responses:
        200:
          description: success
        404:
          description: "no such deal"
        403:
          description: "user cannot change this deal"
        401:
          description: "no auth"
  /deal/{deal_id}/fulfill:
    post:
      tags: ["deal"]
      summary: "Пометить, что сделка успешна. Производится только пользователем(не автором объявления)"
      parameters:
        - name: "deal_id"
          type: "integer"
          in: "path"
          required: true
      responses:
        200:
          description: success
        404:
          description: "no such deal"
        403:
          description: "user cannot change this deal"
        401:
          description: "no auth"
  /donat/create:
    post:
      tags: ["donat"]
      summary: "Создать новую цель для сбора денег"
      parameters:
        - name: donat
          in: body
          schema:
            $ref: "#/definitions/DonationRequest"
      responses:
        201:
          description: "created"
        400:
          description: "some errors in request parameters"
        401:
          description: "no auth"
  /donat/{donat_id}/close:
    post:
      tags: ["donat"]
      summary: "Закрыть сбор средств"
      parameters:
        - name: "donat_id"
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "success"
        404:
          description: "no such donation"
        403:
          description: "not an author of donation, cannot close"
        401:
          description: "no auth"
  /donat/donate:
    post:
      tags: ["donat"]
      summary: "Пожертвовать"
      parameters:
        - name: donat
          in: body
          required: true
          schema:
            $ref: "#/definitions/Donation"
      responses:
        200:
          description: "success"
        404:
          description: "no such donation"
        401:
          description: "no auth"
  /donat/find:
    get:
      tags: ["donat"]
      summary: "искать запросы на пожертвование"
      operationId: "findDonationRequests"
      produces:
        - "application/json"
      parameters:
        - name: "category"
          in: "query"
          type: "string"
          description: "Category where to search"
        - name: "region"
          in: "query"
          type: "string"
          description: "Region where to search"
        - name: "district"
          in: "query"
          type: "string"
          description: "District where to search"
        - name: "query"
          in: "query"
          type: "string"
          description: "Query"
        - name: "page"
          in: "query"
          type: "string"
          description: "page for pagination"
          required: true
        - name: "rows_per_page"
          in: "query"
          type: "string"
          description: "rows per page for pagination"
          required: true
      responses:
        200:
          description: "found smth"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DonationRequest"
        400:
          description: "Invalid parameters"
        404:
          description: "Found nothing"
  /user/{vk_id}:
    get:
      tags:
        - "user"
      summary: "Получить данные о пользователе"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
        - name: "vk_id"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/auth:
    post:
      tags:
        - "user"
      summary: "Авторизовать пользователя (и зарегистрировать, если он еще не разу не заходил в приложение)"
      parameters:
        - name: "auth_info"
          in: "body"
          schema:
            $ref: "#/definitions/AuthInfo"
      responses:
        201:
          description: "new app user created"
          schema:
            $ref: "#/definitions/User"
        200:
          description: "user found"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "data is invalid, though unauthorized"
  /notifications:
    get:
      tags:
        - "notification"
      summary: "Получить уведомления для пользователя"
      parameters:
        - name: "page"
          in: "query"
          type: "string"
          description: "page for pagination"
          required: true
        - name: "rows_per_page"
          in: "query"
          type: "string"
          description: "rows per page for pagination"
          required: true
      responses:
        200:
          description: "got notifications"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
        400:
          description: "bad parameters"
        401:
          description: "unauthaurized"
        404:
          description: "no notifications were found"

definitions:
  User:
    type: "object"
    properties:
      vk_id:
        type: "integer"
        format: "int64"
      carma:
        type: "integer"
      name:
        type: "string"
      surname:
        type: "string"
      photo_url:
        type: "string"
  AuthInfo:
    type: "object"
    properties:
      url:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      photo_url:
        type: "string"
  Comment:
    type: "object"
    properties:
      comment_id:
        type: integer
      author_id:
        type: integer
      text:
        type: string
  CommentForUser:
    type: "object"
    properties:
      comment_id:
        type: integer
      author:
        $ref: '#/definitions/User'
      text:
        type: string
  DealDetails:
    type: "object"
    properties:
      deal_id:
        type: integer
      ad_id:
        type: integer
      subscriber_id:
        type: integer
      status:
        type: string
        enum: ["open", "success"]
        default: "open"
  DonationRequest:
    type: object
    properties:
      donation_id:
        type: integer
      author_id:
        type: integer
      sum_needed:
        type: integer
      expire_date:
        type: string
      # creation_date:
      #   type: string
      # sum_given:
      #   type: integer
      # not in model mb?
      status:
        type: string
        enum: ["open", "closed"]
        default: "closed"
      description:
        type: string
  Donation:
    type: "object"
    properties:
      user_id:
        type: integer
      donat_id:
        type: integer
      region:
        type: "string"
      district:
        type: "string"
      sum:
        type: integer
      category:
        type: "string"
  Ad:
    type: "object"
    properties:
      ad_id:
        type: "integer"
        format: "int64"
      author_id:
        type: "integer"
      header:
        type: "string"
      text:
        type: "string"
      region:
        type: "string"
      district:
        type: "string"
      is_auction:
        type: "boolean"
      feedback_type:
        type: "string"
        enum:
          - "ls"
          - "comments"
          - "other"
      extra_field:
        type: "string"
      creation_date:
        type: "string"
        example: "01.02.2006 15:04"
      geo_position:
        $ref: "#/definitions/GeoPosition"
      status:
        type: "string"
        enum: ["offer", "chosen", "closed"]
        default: "offer"
      pathes_to_photo:
        type: "array"
        items:
          $ref: "#/definitions/AdPhoto"
      category:
        type: "string"
      comments_count:
        type: integer
  AdForUsersDetailed:
    type: "object"
    properties:
      ad_id:
        type: "integer"
        format: "int64"
      author:
        $ref: '#/definitions/User'
      header:
        type: "string"
      text:
        type: "string"
      region:
        type: "string"
      district:
        type: "string"
      is_auction:
        type: "boolean"
      feedback_type:
        type: "string"
        enum:
          - "ls"
          - "comments"
          - "other"
      extra_field:
        type: "string"
      creation_date:
        type: "string"
        example: "01.02.2006 15:04"
      geo_position:
        $ref: "#/definitions/GeoPosition"
      status:
        type: "string"
        enum: ["offer", "chosen", "closed"]
        default: "offer"
      pathes_to_photo:
        type: "array"
        items:
          $ref: "#/definitions/AdPhoto"
      category:
        type: "string"
      comments_count:
        type: integer
  AdForUsers:
    type: "object"
    properties:
      ad_id:
        type: "integer"
        format: "int64"
      author:
        $ref: '#/definitions/User'
      header:
        type: "string"
      region:
        type: "string"
      district:
        type: "string"
      is_auction:
        type: "boolean"
      feedback_type:
        type: "string"
        enum:
          - "ls"
          - "comments"
          - "other"
      extra_field:
        type: "string"
      creation_date:
        type: "string"
        example: "01.02.2006 15:04"
      status:
        type: "string"
        enum: ["offer", "chosen", "closed"]
        default: "offer"
      pathes_to_photo:
        type: "array"
        items:
          $ref: "#/definitions/AdPhoto"
      category:
        type: "string"
      comments_count:
        type: integer
  GeoPosition:
    type: "object"
    properties:
      available:
        type: "boolean"
      long:
        type: "string"
        example: "0"
      lat:
        type: "string"
        example: "0"

  AdCreationResult:
    type: "object"
    properties:
      ad_id:
        type: integer

  AdPhoto:
    type: "object"
    properties:
      ad_photo_id:
        type: integer
      photo_url:
        type: string
        example: "photo1"
  Notification:
    type: "object"
    properties:
      notification_type:
        type: string
        enum: ["ad_close"]
      creation_date_time:
        type: string
        example: "01.02.2006 15:04"
      payload:
        type: object
      is_read:
        type: "boolean"